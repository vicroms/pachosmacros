{
    "name": "Sneak Attack",
    "type": "feat",
    "img": "icons/skills/melee/strike-dagger-arcane-pink.webp",
    "effects": [
      {
        "_id": "Ns5pHr7gcYPTJ7HU",
        "flags": {
          "dae": {
            "stackable": "none",
            "transfer": true,
            "specialDuration": [],
            "macroRepeat": "none",
            "selfTarget": false,
            "selfTargetAlways": false,
            "durationExpression": "",
            "disableIncapacitated": false,
            "dontApply": false,
            "showIcon": false
          },
          "ActiveAuras": {
            "isAura": false,
            "ignoreSelf": false,
            "hidden": false,
            "height": false,
            "aura": "None",
            "radius": "null",
            "alignment": "",
            "type": "",
            "save": "",
            "savedc": null,
            "displayTemp": false,
            "hostile": false,
            "onlyOnce": false,
            "nameOverride": "",
            "customCheck": "",
            "wallsBlock": "system"
          },
          "core": {
            "statusId": ""
          },
          "dfreds-convenient-effects": {
            "description": ""
          }
        },
        "changes": [
          {
            "key": "flags.dnd5e.DamageBonusMacro",
            "mode": 0,
            "value": "ItemMacro",
            "priority": 30
          },
          {
            "key": "macro.createItem",
            "mode": 0,
            "value": "Item.dUo3Il93FR0bbYOl",
            "priority": 20
          },
          {
            "key": "macro.createItem",
            "mode": 0,
            "value": "Item.XmLhVyPzxcRDvVAZ",
            "priority": 20
          },
          {
            "key": "macro.createItem",
            "mode": 0,
            "value": "Item.o0q9TPGq7eKk5C76",
            "priority": 20
          },
          {
            "key": "macro.createItem",
            "mode": 0,
            "value": "Item.bZjdOfR1RTOOZO7g",
            "priority": 20
          }
        ],
        "disabled": false,
        "duration": {
          "startTime": null,
          "seconds": null,
          "combat": null,
          "rounds": null,
          "turns": null,
          "startRound": null,
          "startTurn": null
        },
        "icon": "icons/skills/melee/strike-dagger-arcane-pink.webp",
        "origin": "Item.t0NDh7c9kesbWGL0",
        "tint": null,
        "transfer": true,
        "name": "Sneak Attack",
        "description": "",
        "statuses": []
      }
    ],
    "flags": {
      "dae": {
        "activeEquipped": false,
        "alwaysActive": false,
        "macro": {
          "name": "Sneak Attack (Pachosclan)",
          "img": "icons/skills/melee/strike-dagger-arcane-pink.webp",
          "type": "script",
          "scope": "global",
          "command": "const version = \"10.0.33\"\nconst CS = {\n  NONE: -1,\n  DISARM: 0,\n  POISON: 1,\n  TRIP: 2,\n  WITHDRAW: 3\n};\n\ntry {\n  if (![\"mwak\", \"rwak\"].includes(args[0].itemData.system.actionType)) return {}; // weapon attack\n  \n  if (args[0].itemData.system.actionType === \"mwak\" \n      && !rolledItem?.system.properties.has(\"fin\")) {\n    return {}; // ranged or finesse\n  }\n  \n  if (args[0].hitTargets.length < 1) return {};\n  \n  token = canvas.tokens.get(args[0].tokenId);\n  actor = token.actor;\n  if (!actor || !token || args[0].hitTargets.length < 1) return {};\n  \n  const rogueLevels = actor.getRollData().classes.rogue?.levels;\n  if (!rogueLevels) {\n    MidiQOL.warn(\"Sneak Attack Damage: Trying to do sneak attack and not a rogue\");\n    return {}; // rogue only\n  }\n  \n  let target = canvas.tokens.get(args[0].hitTargets[0].id ?? args[0].hitTargers[0]._id);\n  if (!target) MidiQOL.error(\"Sneak attack macro failed\");\n\n  if (game.combat) {\n    const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn / 100}`;\n    const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n    if (combatTime === lastTime) {\n      MidiQOL.warn(\"Sneak Attack Damage: Already done a sneak attack this turn\");\n      return {};\n    }\n  }\n  let foundEnemy = true;\n  let isSneak = args[0].advantage;\n\n  if (!isSneak) {\n    foundEnemy = false;\n    let nearbyEnemy = canvas.tokens.placeables.filter(t => {\n      let nearby = (t.actor &&\n        t.actor?.id !== args[0].actor._id && // not me\n        t.id !== target.id && // not the target\n        t.actor?.system.attributes?.hp?.value > 0 && // not incapacitated\n        t.document.disposition !== target.document.disposition && // not an ally\n        MidiQOL.getDistance(t, target, false) <= 5 // close to the target\n      );\n      foundEnemy = foundEnemy || (nearby && t.document.disposition === -target.document.disposition)\n      return nearby;\n    });\n    isSneak = nearbyEnemy.length > 0;\n  }\n  \n  if (!isSneak) {\n    MidiQOL.warn(\"Sneak Attack Damage: No advantage/ally next to target\");\n    return {};\n  }\n  \n  let autoSneak= getProperty(actor, \"flags.dae.autoSneak\");\n  let useSneak = await showCunningStrikeDialog(autoSneak, rogueLevels);\n  if (!useSneak) return {}\n  \n  let baseDice = Math.ceil(rogueLevels / 2);\n  if (game.combat) {\n    const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn / 100}`;\n    const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n    if (combatTime !== lastTime) {\n      await actor.setFlag(\"midi-qol\", \"sneakAttackTime\", combatTime)\n    }\n  }\n \n  if (useSneak && useSneak.effect!== CS.NONE){\n    const itemName= getItemName(useSneak.effect);\n    let i= workflow.actor.items.getName(itemName);\n    if (!i){\n        ui.notifications.error(`Sneak Attack | ${itemName} not found`);\n    }\n    else {\n      if (useSneak.effect=== CS.POISON && !workflow.actor.items.getName(\"Poisoner's Kit\")){\n        ui.notifications.error(`Sneak Attack | No Kit Found`);\n        useSneak.cost= 0;\n        }  \n      else {\n        game.macros.getName(\"CunningStrikeEffects\").execute({item: i, hitTargets: args[0].hitTargets}) ;\n        }\n     }\n  } \n  const cost = useSneak? useSneak.cost : 0;\n  const damageFormula = new CONFIG.Dice.DamageRoll(`${baseDice - cost}d6`, {}, {\n    critical: args[0].isCritical ?? false,\n    powerfulCritical: game.settings.get(\"dnd5e\", \"criticalDamageMaxDice\"),\n    multiplyNumeric: game.settings.get(\"dnd5e\", \"criticalDamageModifiers\")\n  }).formula\n  // How to check that we've already done one this turn?\n  return { damageRoll: damageFormula, flavor: \"Sneak Attack\" };\n} catch (err) {\n  console.error(`${args[0].itemData.name} - Sneak Attack ${version}`, err);\n}\n\n/* If a Cunning Strike effect requires a saving throw, the DC equals 8 + your Proficiency Bonus + your Dexterity modifier.\n * \n * Disarm (Cost: 1d6). The target must succeedon a Dexterity saving throw, or it drops one item of your choice that it’s holding.\n *\n * Poison (Cost: 1d6). You add a toxin to your strike, forcing the target to make a Constitution saving throw. On a failed save, \n * the target has the Poisoned condition for 1 minute. At the end of each of its turns, the Poisoned target can repeat the save, \n * ending the effect on itself on a success. To use this effect, you must have a Poisoner’s Kit on your person.\n * \n * Trip (Cost: 1d6). If the target is Large or smaller, it must succeed on a Dexterity saving throw or have the Prone condition.\n *  \n * Withdraw (Cost: 1d6). Immediately after the attack, you move up to half your Speed.\n */\nasync function showCunningStrikeDialog(autoSneak, rogueLevels) {    \n    if (rogueLevels < 5) {\n        // TODO: show dialog to select weather to apply sneak attack\n        return { effect: CS.NONE, cost: 0};    \n    }\n    \n\n    let effectDialog = new Promise((resolve, reject) => {\n      new Dialog({\n        // localize this text\n        title: \"Conditional Damage\",\n        content: `<p>Use Cunning Strike effect?</p>`,\n        buttons: {\n          noextraeffect: {\n            icon: '<img src=\"homebrew/icons/bg3/skills_png/actions/Action_SneakAttack_Melee.webp\"></img>',\n            label: \"No Effect\",\n            callback: () => { resolve({ effect: CS.NONE, cost: 0 }) }\n          },\n          disarm: {\n            //icon: '<i class=\"fas fa-check\"></i>',\n            icon: '<img src=\"homebrew/icons/bg3/skills_png/actions/Action_DisarmingAttack_Melee.webp\"></img>',\n            label: \"Disarm\",\n            callback: () => { resolve({ effect: CS.DISARM, cost: 1 }) }\n          },\n          poison: {\n            icon: '<img src=\"homebrew/icons/bg3/skills_png/actions/Action_MagicItem_PoisonLethality.webp\"></img>',\n            label: \"Poison\",\n            callback: () => { resolve({ effect: CS.POISON, cost: 1 }) }\n          },\n          trip: {\n            icon: '<img src=\"homebrew/icons/bg3/skills_png/actions/Action_Trip.webp\"></img>',\n            label: \"Trip\",\n            callback: () => { resolve({ effect: CS.TRIP, cost: 1 }) }\n          },\n          withdraw: {\n            icon: '<img src=\"homebrew/icons/bg3/skills_png/actions/Action_SupremeSneak.webp\"></img>',\n            label: \"Withdraw\",\n            callback: () => { resolve({ effect: CS.WITHDRAW, cost: 1 }) }\n          },\n          none: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: \"None\",\n            callback: () => { resolve(false) }\n          }\n\n        },\n        default: \"noextraeffect\"\n      }).render(true);\n    });\n    return await effectDialog;\n}\n\nfunction getItemName(effectName){\n  switch(effectName){\n      case CS.NONE:\n      return \"\";\n      case CS.TRIP:\n      return \"Cunning Strike - Trip\";\n      case CS.POISON:\n      return \"Cunning Strike - Poison\";\n      case CS.WITHDRAW:\n      return \"Cunning Strike - Withdraw\";\n      case CS.DISARM:\n      return \"Cunning Strike - Disarm\";\n  }\n  return \"\";\n}",
          "author": "L2oPGhMyV7YTPI2h",
          "ownership": {
            "default": 3
          },
          "_id": null,
          "folder": null,
          "sort": 0,
          "flags": {},
          "_stats": {
            "systemId": null,
            "systemVersion": null,
            "coreVersion": null,
            "createdTime": null,
            "modifiedTime": null,
            "lastModifiedBy": null
          }
        }
      },
      "exportSource": {
        "world": "pachosclan",
        "system": "dnd5e",
        "coreVersion": "11.315",
        "systemVersion": "3.1.2"
      },
      "magicitems": {
        "enabled": false,
        "equipped": false,
        "attuned": false,
        "charges": "0",
        "chargeType": "c1",
        "destroy": false,
        "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
        "rechargeable": false,
        "recharge": "0",
        "rechargeType": "t1",
        "rechargeUnit": "r1",
        "sorting": "l",
        "default": ""
      },
      "itemacro": {
        "macro": {
          "data": {
            "_id": null,
            "name": "Sneak Attack",
            "type": "script",
            "author": "devnIbfBHb74U9Zv",
            "img": "icons/svg/dice-target.svg",
            "scope": "global",
            "command": "const version = \"0.9.52\"\ntry {\n    if (![\"mwak\",\"rwak\"].includes(args[0].itemData.data.actionType)) return {}; // weapon attack\n    if (args[0].itemData.data.actionType === \"mwak\" && !args[0].itemData.data.properties?.fin) \n      return {}; // ranged or finesse\n    if (args[0].hitTargets.length < 1) return {};\n    token = canvas.tokens.get(args[0].tokenId);\n    actor = token.actor;\n    if (!actor || !token || args[0].hitTargets.length < 1) return {};\n    const rogueLevels = actor.getRollData().classes.rogue?.levels;\n    if (!rogueLevels) {\n      MidiQOL.warn(\"Sneak Attack Damage: Trying to do sneak attack and not a rogue\");\n      return {}; // rogue only\n    }\n    let target = canvas.tokens.get(args[0].hitTargets[0].id ?? args[0].hitTargers[0]._id);\n    if (!target) MidiQOL.error(\"Sneak attack macro failed\");\n    \n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime === lastTime) {\n       MidiQOL.warn(\"Sneak Attack Damage: Already done a sneak attack this turn\");\n       return {};\n      }\n    }\n    let foundEnemy = true;\n    let isSneak = args[0].advantage;\n    \n    if (!isSneak) {\n      foundEnemy = false;\n      let nearbyEnemy = canvas.tokens.placeables.filter(t => {\n        let nearby = (t.actor &&\n             t.actor?.id !== args[0].actor._id && // not me\n             t.id !== target.id && // not the target\n             t.actor?.data.data.attributes?.hp?.value > 0 && // not incapacitated\n             t.data.disposition !== target.data.disposition && // not an ally\n             MidiQOL.getDistance(t, target, false) <= 5 // close to the target\n         );\n        foundEnemy = foundEnemy || (nearby && t.data.disposition === -target.data.disposition)\n        return nearby;\n      });\n      isSneak = nearbyEnemy.length > 0;\n    }\n    if (!isSneak) {\n      MidiQOL.warn(\"Sneak Attack Damage: No advantage/ally next to target\");\n      return {};\n    }\n    let useSneak = getProperty(actor.data, \"flags.dae.autoSneak\");\n    if (!useSneak) {\n        let dialog = new Promise((resolve, reject) => {\n          new Dialog({\n          // localize this text\n          title: \"Conditional Damage\",\n          content: `<p>Use Sneak attack?</p>`+(!foundEnemy ? \"<p>Only Nuetral creatures nearby</p>\" : \"\"),\n          buttons: {\n              one: {\n                  icon: '<i class=\"fas fa-check\"></i>',\n                  label: \"Confirm\",\n                  callback: () => resolve(true)\n              },\n              two: {\n                  icon: '<i class=\"fas fa-times\"></i>',\n                  label: \"Cancel\",\n                  callback: () => {resolve(false)}\n              }\n          },\n          default: \"two\"\n          }).render(true);\n        });\n        useSneak = await dialog;\n    }\n    if (!useSneak) return {}\n    const diceMult = args[0].isCritical ? 2: 1;\n    const baseDice = Math.ceil(rogueLevels/2);\n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime !== lastTime) {\n         await actor.setFlag(\"midi-qol\", \"sneakAttackTime\", combatTime)\n      }\n    }\n    // How to check that we've already done one this turn?\n    return {damageRoll: `${baseDice * diceMult}d6`, flavor: \"Sneak Attack\"};\n} catch (err) {\n    console.error(`${args[0].itemData.name} - Sneak Attack ${version}`, err);\n}",
            "folder": null,
            "sort": 0,
            "permission": {
              "default": 0
            },
            "flags": {}
          },
          "name": "Sneak Attack 10.0.33",
          "type": "script",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const version = \"10.0.33\"\ntry {\n    if (![\"mwak\",\"rwak\"].includes(args[0].itemData.system.actionType)) return {}; // weapon attack\n    if (args[0].itemData.system.actionType === \"mwak\" && !args[0].itemData.system.properties?.fin) \n      return {}; // ranged or finesse\n    if (args[0].hitTargets.length < 1) return {};\n    token = canvas.tokens.get(args[0].tokenId);\n    actor = token.actor;\n    if (!actor || !token || args[0].hitTargets.length < 1) return {};\n    const rogueLevels = actor.getRollData().classes.rogue?.levels;\n    if (!rogueLevels) {\n      MidiQOL.warn(\"Sneak Attack Damage: Trying to do sneak attack and not a rogue\");\n      return {}; // rogue only\n    }\n    let target = canvas.tokens.get(args[0].hitTargets[0].id ?? args[0].hitTargers[0]._id);\n    if (!target) MidiQOL.error(\"Sneak attack macro failed\");\n    \n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime === lastTime) {\n       MidiQOL.warn(\"Sneak Attack Damage: Already done a sneak attack this turn\");\n       return {};\n      }\n    }\n    let foundEnemy = true;\n    let isSneak = args[0].advantage;\n    \n    if (!isSneak) {\n      foundEnemy = false;\n      let nearbyEnemy = canvas.tokens.placeables.filter(t => {\n        let nearby = (t.actor &&\n             t.actor?.id !== args[0].actor._id && // not me\n             t.id !== target.id && // not the target\n             t.actor?.system.attributes?.hp?.value > 0 && // not incapacitated\n             t.document.disposition !== target.document.disposition && // not an ally\n             MidiQOL.getDistance(t, target, false) <= 5 // close to the target\n         );\n        foundEnemy = foundEnemy || (nearby && t.document.disposition === -target.document.disposition)\n        return nearby;\n      });\n      isSneak = nearbyEnemy.length > 0;\n    }\n    if (!isSneak) {\n      MidiQOL.warn(\"Sneak Attack Damage: No advantage/ally next to target\");\n      return {};\n    }\n    let useSneak = getProperty(actor, \"flags.dae.autoSneak\");\n    if (!useSneak) {\n        let dialog = new Promise((resolve, reject) => {\n          new Dialog({\n          // localize this text\n          title: \"Conditional Damage\",\n          content: `<p>Use Sneak attack?</p>`+(!foundEnemy ? \"<p>Only Nuetral creatures nearby</p>\" : \"\"),\n          buttons: {\n              one: {\n                  icon: '<i class=\"fas fa-check\"></i>',\n                  label: \"Confirm\",\n                  callback: () => resolve(true)\n              },\n              two: {\n                  icon: '<i class=\"fas fa-times\"></i>',\n                  label: \"Cancel\",\n                  callback: () => {resolve(false)}\n              }\n          },\n          default: \"two\"\n          }).render(true);\n        });\n        useSneak = await dialog;\n    }\n    if (!useSneak) return {}\n    const baseDice = Math.ceil(rogueLevels/2);\n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime !== lastTime) {\n         await actor.setFlag(\"midi-qol\", \"sneakAttackTime\", combatTime)\n      }\n    }\n    const damageFormula = new CONFIG.Dice.DamageRoll(`${baseDice}d6`, {}, {\n        critical: args[0].isCritical ?? false, \n        powerfulCritical: game.settings.get(\"dnd5e\", \"criticalDamageMaxDice\"),\n        multiplyNumeric: game.settings.get(\"dnd5e\",  \"criticalDamageModifiers\")\n    }).formula\n    // How to check that we've already done one this turn?\n    return {damageRoll: damageFormula, flavor: \"Sneak Attack\"};\n} catch (err) {\n    console.error(`${args[0].itemData.name} - Sneak Attack ${version}`, err);\n}",
          "sort": 0,
          "ownership": {
            "default": 0
          },
          "flags": {},
          "_stats": {
            "systemId": null,
            "systemVersion": null,
            "coreVersion": null,
            "createdTime": null,
            "modifiedTime": null,
            "lastModifiedBy": null
          }
        }
      },
      "betterRolls5e": {
        "critRange": {
          "value": null
        },
        "critDamage": {
          "value": ""
        },
        "quickDesc": {
          "value": true,
          "altValue": true
        },
        "quickProperties": {
          "value": true,
          "altValue": true
        },
        "quickOther": {
          "value": true,
          "altValue": true
        },
        "quickFlavor": {
          "value": true,
          "altValue": true
        }
      },
      "core": {},
      "favtab": {
        "isFavorite": false
      },
      "autoanimations": {
        "killAnim": false,
        "override": false,
        "animType": "t1",
        "animName": "",
        "hmAnim": "a1",
        "color": "a1",
        "dtvar": "dt1",
        "explosion": false,
        "explodeVariant": "ev1",
        "explodeColor": "",
        "explodeRadius": "0",
        "explodeLoop": "1",
        "selfRadius": "5",
        "animTint": "#ffffff",
        "auraOpacity": 0.75,
        "ctaOption": false,
        "animLevel": false,
        "bards": {
          "bardAnim": "a1",
          "bardTarget": true,
          "bardTargetAnim": "a1",
          "bardTargetColor": "a1",
          "bardSelf": true,
          "marker": true,
          "markerColor": "a1",
          "markerColorTarget": "a1"
        },
        "spellVar": "a1",
        "rangedOptions": {
          "rangeDmgType": ""
        },
        "spellOptions": {
          "spellLoops": 1
        },
        "uaStrikeType": "physical",
        "divineSmite": {
          "dsEnable": false,
          "dsSelf": true,
          "dsSelfDelay": 0,
          "dsSelfColor": "a1",
          "dsTarget": true,
          "dsTargetDelay": 1250,
          "dsTargetColor": "a1"
        },
        "exAnimLevel": false,
        "impactVar": "a1",
        "allSounds": {
          "explosion": {
            "audioExplodeEnabled": false,
            "file": "",
            "delay": 100,
            "volume": 0.25
          },
          "item": {
            "enableAudio": false,
            "file": "",
            "delay": 100,
            "volume": 0.25
          }
        },
        "teleDist": 30,
        "templates": {
          "tempType": "a1",
          "tempAnim": "",
          "tempColor": "",
          "tempLoop": 1,
          "customAnim": false,
          "customPath": ""
        }
      },
      "cf": {
        "id": "temp_qt0kn9os0vl",
        "color": "#000000"
      },
      "scene-packer": {
        "hash": "494c12f1d99b47f6d7f7c3e0202008b6f2d89a85",
        "sourceId": "Item.t0NDh7c9kesbWGL0"
      },
      "midiProperties": {
        "confirmTargets": "default",
        "autoFailFriendly": false,
        "autoSaveFriendly": false,
        "critOther": false,
        "offHandWeapon": false,
        "magicdam": false,
        "magiceffect": false,
        "concentration": false,
        "noConcentrationCheck": false,
        "toggleEffect": false,
        "ignoreTotalCover": false
      },
      "midi-qol": {
        "rollAttackPerTarget": "default",
        "itemCondition": "",
        "effectCondition": ""
      }
    },
    "system": {
      "description": {
        "value": "<p>Beginning at 1st level, you know how to strike subtly and exploit a foe's distraction. Once per turn, you can deal an extra [[/r 1d6]] damage to one creature you hit with an attack if you have advantage on the attack roll. The attack must use a finesse or a ranged weapon.</p><p>You don't need advantage on the attack roll if another enemy of the target is within 5 feet of it, that enemy isn't <a href=\"https://5e.tools/conditionsdiseases.html#incapacitated_phb\">incapacitated</a>, and you don't have disadvantage on the attack roll.</p><p>The amount of the extra damage increases as you gain levels in this class, as shown in the Sneak Attack column of the Rogue table.</p><h2>5TH LEVEL: CUNNING STRIKE</h2><p>You have developed cunning ways to use your Sneak Attack.</p><p>When you deal Sneak Attack damage, you can add one of the following Cunning Strike effects. Each effect has a die cost, which is the number of Sneak Attack damage dice you must forego to add the effect. You remove the die before rolling, and the effect occurs immediately after the attack’s damage is dealt.</p><p>For example, if you add the Poison effect, remove 1d6 from the Sneak Attack’s damage before rolling. If a Cunning Strike effect requires a saving throw, the DC equals 8 + your Proficiency Bonus + your Dexterity modifier</p>",
        "chat": ""
      },
      "source": {
        "custom": "PHB"
      },
      "activation": {
        "type": "special",
        "cost": 0,
        "condition": ""
      },
      "duration": {
        "value": "24",
        "units": "hour"
      },
      "cover": null,
      "crewed": false,
      "target": {
        "value": null,
        "width": null,
        "units": "",
        "type": "self",
        "prompt": true
      },
      "range": {
        "value": null,
        "long": null,
        "units": "self"
      },
      "uses": {
        "value": null,
        "max": "",
        "per": null,
        "recovery": "",
        "prompt": true
      },
      "consume": {
        "type": "",
        "target": "",
        "amount": null,
        "scale": false
      },
      "ability": null,
      "actionType": "",
      "chatFlavor": "",
      "critical": {
        "threshold": null,
        "damage": ""
      },
      "damage": {
        "parts": [],
        "versatile": ""
      },
      "formula": "",
      "save": {
        "ability": "",
        "dc": null,
        "scaling": "spell"
      },
      "type": {
        "value": "",
        "subtype": ""
      },
      "requirements": "Rogue 1",
      "recharge": {
        "value": null,
        "charged": false
      },
      "attack": {
        "bonus": "",
        "flat": false
      },
      "summons": null,
      "properties": []
    },
    "_stats": {
      "systemId": "dnd5e",
      "systemVersion": "3.1.2",
      "coreVersion": "11.315",
      "createdTime": 1661995926111,
      "modifiedTime": 1718231534464,
      "lastModifiedBy": "L2oPGhMyV7YTPI2h"
    },
    "folder": "ygkq9OUVNZETjso6"
  }
  